
var gl;
var programInfo;
var modelBuffer;
var timer = 0.0;
var canvas = document.getElementById("glcanvas");

var l_dir = [0.6, -1.0, -1.0];

var last_pos = [0.0, 0.0, 0.0];
var model_quat = quat.create();
var model_axis = [1.0, 0.0, 0.0]
var model_angle = 0.0;

window.requestAnimFrame = ( function() {
   
    return  window.requestAnimationFrame || 
            window.webkitRequestAnimationFrame ||  
            window.mozRequestAnimationFrame || 
            window.oRequestAnimationFrame || 
            window.msRequestAnimationFrame ||
    
    // if none of the above, use non-native timeout method
    function(callback) {
      window.setTimeout(callback, 1000 / 60);
    };
  
  } ) (); 
function renderLoop(){
  timer++;
  requestAnimFrame( renderLoop );
  render(); 
}
function main() {
  const canvas = document.querySelector('#glcanvas');
  gl = canvas.getContext('webgl');

  if (!gl) {
    alert('Unable to initialize WebGL. Your browser or machine may not support it.');
    return;
  }
  
  gl.clearColor(0.0, 0.0, 0.0, 1.0);
  gl.clearDepth(1.0);               
  gl.enable(gl.DEPTH_TEST);         
  gl.depthFunc(gl.LEQUAL);     
	
  const vsSource = `
    attribute vec4 aVertexPosition;
  	attribute vec3 aVertexNormal;
	
    uniform mat4 uMVP;
	uniform mat3 uMVI;
	
	varying highp vec3 vVertexNormal;
	
    void main() {
      gl_Position = uMVP * aVertexPosition;
	  vVertexNormal = uMVI * aVertexNormal;
    }
  `;

  const fsSource = `
	precision highp float;

	uniform float uToonNumBands;
	uniform float uToonStride;
	
	uniform vec3  uObjectColor;
	uniform vec3  uLightDir;
	uniform float uLightAmb;
  
	varying highp vec3 vVertexNormal;
  
    float toonify(float value) {
		float x = clamp(value, uToonStride, 1.0 - uToonStride - 0.001);
		float bandlen = (1.0 - 2.0*uToonStride) / uToonNumBands;
	    return uToonStride + bandlen*(floor((x - uToonStride)/bandlen) + 0.5);
	}
    void main() {
	  float intensity = clamp(dot(uLightDir, vVertexNormal),0.0,1.0) + uLightAmb;
	  gl_FragColor = vec4(uObjectColor * toonify(intensity), 1.0);
	  
	  float I = clamp(dot(uLightDir, vVertexNormal),0.0,1.0);
    }
  `;
  const shaderProgram = initShaderProgram(vsSource, fsSource);

  programInfo = {
    program: shaderProgram,
    attribLocations: {
      vertexPosition: gl.getAttribLocation (shaderProgram, 'aVertexPosition'),
	  vertexNormal:   gl.getAttribLocation (shaderProgram, 'aVertexNormal'	),
    },                                    
    uniformLocations: {                   
	  toonNumBands:   gl.getUniformLocation(shaderProgram, 'uToonNumBands'	),
	  toonStride:     gl.getUniformLocation(shaderProgram, 'uToonStride'	),
	  
	  objectColor:    gl.getUniformLocation(shaderProgram, 'uObjectColor'	), // Light
	  lightAmb:  	  gl.getUniformLocation(shaderProgram, 'uLightAmb'		), 
	  lightDir: 	  gl.getUniformLocation(shaderProgram, 'uLightDir'   	),    
	  
	  MVP: 			  gl.getUniformLocation(shaderProgram, 'uMVP'			),
	  MVI: 			  gl.getUniformLocation(shaderProgram, 'uMVI'			),
    },
  };

  modelBuffer = initBuffers();
  renderLoop();
}
function initBuffers() {
  const modelVertexBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, modelVertexBuffer);
  
  const modelData = [
    -0.50603,1.205815,0.876469,0.5741,-0.0883,-0.814,
    -0.876469,1.205815,0.506029,0.9042,-0.0883,-0.418,
    -0.829329,1.304325,0.478813,0.8431,-0.0584,-0.5346,
    0.829328,1.304325,0.478813,-0.8572,-0.123,-0.5001,
    0.876468,1.205815,0.50603,-0.8234,-0.0884,-0.5605,
    0.506029,1.205815,0.876469,-0.4329,-0.0884,-0.8971,
    -0.50603,1.205815,-0.876469,0.4179,-0.0883,0.9042,
    0,1.205815,-1.012059,-0.0901,-0.0883,0.992,
    0,1.304325,-0.957626,0.0563,-0.2097,0.9761,
    0.478813,1.304325,-0.829328,-0.4594,-0.1859,0.8685,
    0.50603,1.205815,-0.876469,-0.5701,-0.0736,0.8183,
    0.876469,1.205815,-0.506029,-0.8547,-0.1104,0.5073,
    -0.957626,1.304325,0,0.9819,-0.1859,0.0363,
    -1.012059,1.205815,0,0.9937,-0.0736,0.0846,
    -0.876469,1.205815,-0.506029,0.8191,-0.1021,0.5645,
    -0.876469,1.205815,0.506029,0.9042,-0.0883,-0.4179,
    -0.957626,1.304325,0,0.9819,-0.1859,0.0364,
    0,1.205815,1.012059,0.0793,-0.1021,-0.9916,
    -0.478813,1.304325,0.829328,0.4154,-0.1225,-0.9013,
    0.478813,1.304325,0.829329,-0.4629,-0.0584,-0.8845,
    0.957626,1.304325,0,-0.9924,-0.123,-0.0045,
    1.012058,1.205815,0,-0.997,-0.0771,0.0064,
    0.876468,1.205815,0.50603,-0.8235,-0.0884,-0.5604,
    0.829329,1.304325,-0.478813,-0.8617,-0.123,0.4923,
    1.012058,1.205815,0,-0.997,-0.077,0.0064,
    -0.50603,1.205815,-0.876469,0.418,-0.0883,0.9042,
    -0.478813,1.304325,-0.829329,0.5001,-0.123,0.8572,
    0.478813,1.304325,-0.829328,-0.4595,-0.1859,0.8685,
    1.075739,-0.579111,0,-0.9975,-0.0423,0.0575,
    0.931581,-0.579064,-0.537848,-0.8654,-0.038,0.4996,
    0.972963,-1.564022,-0.56174,-0.8657,-0.0278,0.4998,
    1.123481,-1.564024,0,-0.9992,-0.0129,-0.0384,
    0.960723,-2.48868,-0.554673,-0.8823,0.038,0.4692,
    1.04778,-3.352169,0,-0.9729,0.0302,-0.2292,
    1.109347,-2.48868,0,-0.9979,0.0457,-0.0468,
    0,-1.564022,-1.12348,0.0014,-0.0175,0.9998,
    0,-0.579064,-1.075697,-0.0075,-0.0408,0.9991,
    -0.537849,-0.579064,-0.931581,0.449,-0.0423,0.8925,
    0,-2.48868,-1.109348,0.0085,0.0404,0.9991,
    0,-1.564022,-1.12348,0.0014,-0.0174,0.9998,
    -0.56174,-1.564022,-0.972963,0.5012,-0.0175,0.8652,
    0,-3.352169,-1.04778,-0.2292,0.0302,0.9729,
    -0.554674,-2.48868,-0.960724,0.5048,0.042,0.8622,
    0.56174,-1.564022,0.972962,-0.5011,-0.0174,-0.8652,
    0.537848,-0.579064,0.93158,-0.493,-0.0408,-0.869,
    0.931617,-0.579111,0.53787,-0.8821,-0.0419,-0.4691,
    0.554673,-2.48868,0.960723,-0.5048,0.042,-0.8622,
    0.972963,-1.564024,0.561741,-0.839,-0.0112,-0.544,
    0.52389,-3.352169,0.907404,-0.6885,-0.0169,-0.7251,
    0.960694,-2.489244,0.554657,-0.8672,0.0389,-0.4965,
    -0.931581,-0.579064,0.537848,0.8653,-0.0408,-0.4996,
    -0.537849,-0.579064,0.93158,0.4555,-0.039,-0.8894,
    -0.561741,-1.564022,0.972962,0.5315,-0.0218,-0.8468,
    -0.960724,-2.48868,0.554674,0.8622,0.042,-0.5048,
    -0.972963,-1.564022,0.56174,0.8906,-0.0113,-0.4546,
    -0.907404,-3.352169,0.52389,0.7251,-0.0169,-0.6885,
    -0.554657,-2.489243,0.960694,0.4965,0.0389,-0.8672,
    0.931581,-0.579064,-0.537848,-0.8654,-0.038,0.4997,
    0.537849,-0.579064,-0.93158,-0.5061,-0.0408,0.8615,
    0.561741,-1.564022,-0.972962,-0.4987,-0.0174,0.8666,
    0.907405,-3.352169,-0.52389,-0.7251,-0.0169,0.6885,
    0.554658,-2.489243,-0.960694,-0.4965,0.0389,0.8672,
    -0.537849,-0.579064,-0.931581,0.4489,-0.0444,0.8925,
    -0.931581,-0.579064,-0.537848,0.8435,-0.0396,0.5357,
    -0.56174,-1.564022,-0.972963,0.5011,-0.0175,0.8652,
    -0.972963,-1.564022,-0.56174,0.8666,-0.0174,0.4987,
    -0.52389,-3.352169,-0.907404,0.6885,-0.0169,0.7251,
    -0.960695,-2.489243,-0.554657,0.8672,0.0389,0.4965,
    -0.537849,-0.579064,0.93158,0.4554,-0.039,-0.8894,
    0,-0.579064,1.075696,0.0075,-0.0408,-0.9991,
    -0.561741,-1.564022,0.972962,0.5315,-0.0219,-0.8468,
    0,-1.564022,1.12348,-0.0014,-0.0175,-0.9998,
    -0.528273,-3.346909,0.914995,0.4359,0.2007,-0.8773,
    0,-2.48868,1.109347,-0.0085,0.0404,-0.9991,
    0.528273,-3.346909,-0.914995,-0.4359,0.2007,0.8773,
    -1.075697,-0.579064,0,0.9975,-0.0423,0.0574,
    -1.123481,-1.564022,0,0.9998,-0.0175,-0.0014,
    -0.914995,-3.346909,-0.528273,0.8773,0.2007,0.4359,
    -1.109348,-2.48868,0,0.9991,0.0404,-0.0085,
    1.075739,-0.579111,0,-0.9975,-0.0423,0.0574,
    0.914995,-3.346909,0.528273,-0.8773,0.2007,-0.4359,
    0.537848,-0.579064,0.93158,-0.4931,-0.0408,-0.869,
    0,-1.564022,1.12348,-0.0014,-0.0174,-0.9998,
    0,-3.352169,1.04778,0.2292,0.0302,-0.9729,
    -1.075697,-0.579064,0,0.9974,-0.0444,0.0575,
    -1.123481,-1.564022,0,0.9998,-0.0174,-0.0014,
    -1.04778,-3.352169,0,0.9729,0.0302,0.2292,
    -0.50603,1.205815,0.876469,0.574,-0.0883,-0.8141,
    -0.829329,1.304325,0.478813,0.8431,-0.0584,-0.5345,
    0.478813,1.304325,0.829329,-0.4629,-0.0585,-0.8845,
    0,1.304325,-0.957626,0.0563,-0.2097,0.9762,
    -0.829329,1.304325,-0.478813,0.8378,-0.0298,0.5452,
    -0.829329,1.304325,0.478813,0.8431,-0.0585,-0.5346,
    0,1.304325,0.957626,0,-0.1213,-0.9926,
    0,1.304325,-0.957626,0.0563,-0.2096,0.9762,
    1.123481,-1.564024,0,-0.9992,-0.0129,-0.0383,
    0.554673,-2.48868,0.960723,-0.5049,0.042,-0.8622,
    0.52389,-3.352169,0.907404,-0.6884,-0.0169,-0.7251,
    -0.960724,-2.48868,0.554674,0.8622,0.042,-0.5049,
    -0.907404,-3.352169,0.52389,0.7251,-0.0169,-0.6884,
    0.907405,-3.352169,-0.52389,-0.7251,-0.0169,0.6884,
    -0.554674,-2.48868,-0.960724,0.5049,0.042,0.8622,
    -0.52389,-3.352169,-0.907404,0.6884,-0.0169,0.7251,
    1.109347,-2.48868,0,-0.9979,0.0457,-0.0467,
    0.56174,-1.564022,0.972962,-0.5012,-0.0175,-0.8652,
    0.56174,-1.564022,0.972962,-0.5011,-0.0175,-0.8652,
    0,0.315231,-1.046978,-0.0029,-0.0356,0.9994,
    0.523489,0.315231,-0.906709,-0.5022,-0.0356,0.864,
    -0.523489,0.315231,-0.90671,0.5312,-0.0351,0.8465,
    -0.931581,-0.579064,-0.537848,0.8435,-0.0396,0.5356,
    -1.046978,0.315231,0,0.9987,-0.0351,-0.0368,
    -0.90671,0.315231,-0.523489,0.8903,-0.0363,0.454,
    -1.075697,-0.579064,0,0.9975,-0.0423,0.0575,
    -0.523489,0.315231,0.906709,0.5022,-0.0356,-0.864,
    -0.90671,0.315231,0.523489,0.8383,-0.0363,-0.544,
    0,0.315231,1.046978,0.0029,-0.0356,-0.9994,
    0.523489,0.315231,0.906709,-0.4971,-0.0356,-0.8669,
    0.906727,0.315207,0.5235,-0.864,-0.0356,-0.5022,
    0.523489,0.315231,0.906709,-0.4972,-0.0356,-0.8669,
    1.046999,0.315207,0,-0.9994,-0.0344,0,
    0.931617,-0.579111,0.53787,-0.8822,-0.0419,-0.4691,
    1.046999,0.315207,0,-0.9994,-0.0345,0,
    0.90671,0.315231,-0.523488,-0.8654,-0.0368,0.4997,
    0.876469,1.205815,-0.506029,-0.8547,-0.1105,0.5073,
    0.90671,0.315231,-0.523488,-0.8654,-0.0366,0.4997,
    1.012058,1.205815,0,-0.997,-0.0771,0.0063,
    -0.523489,0.315231,-0.90671,0.5312,-0.035,0.8465,
    -1.046978,0.315231,0,0.9987,-0.035,-0.0368,
    1.075739,-0.579111,0,-0.9975,-0.0422,0.0575,
    0.931581,-0.579064,-0.537848,-0.8654,-0.0379,0.4997,
    0.523489,0.315231,-0.906709,-0.5022,-0.0366,0.864,
    1.046999,0.315207,0,-0.9993,-0.0366,0,
    0.906727,0.315207,0.5235,-0.864,-0.0366,-0.5022,
    0.523489,0.315231,0.906709,-0.4972,-0.0366,-0.8669,
    0,0.315231,1.046978,0.0029,-0.0366,-0.9993,
    -0.523489,0.315231,0.906709,0.5022,-0.0366,-0.864,
    -0.90671,0.315231,0.523489,0.8383,-0.036,-0.544,
    -1.046978,0.315231,0,0.9987,-0.0362,-0.0368,
    -0.90671,0.315231,-0.523489,0.8903,-0.036,0.454,
    -0.523489,0.315231,-0.90671,0.5312,-0.0362,0.8465,
    0,0.315231,-1.046978,-0.0029,-0.0366,0.9993,
    0.452031,3.25363,-0.26098,-0.8384,-0.3716,0.3987,
    0.675828,2.364823,-0.390189,-0.8551,-0.2402,0.4594,
    0.780378,2.364821,0,-0.9703,-0.2402,-0.0297,
    0.675828,2.364823,-0.390189,-0.8552,-0.2402,0.4594,
    0.856375,1.395711,-0.494428,-0.823,-0.1619,0.5445,
    0.988857,1.395711,0,-0.985,-0.1619,0.06,
    0.26098,3.25363,0.452031,-0.3957,-0.3524,-0.8481,
    0.390189,2.364823,0.675828,-0.4594,-0.2402,-0.8551,
    0,2.364823,0.780378,0.052,-0.2438,-0.9684,
    0.390189,2.364823,0.675828,-0.4594,-0.2402,-0.8552,
    0.494428,1.395712,0.856375,-0.5513,-0.1766,-0.8154,
    0,1.395711,0.988857,-0.066,-0.1477,-0.9868,
    -0.452031,3.25363,0.26098,0.8157,-0.3358,-0.471,
    -0.675828,2.364823,0.390189,0.8427,-0.2305,-0.4865,
    -0.780378,2.364823,0,0.9676,-0.2524,0,
    -0.856376,1.395712,0.494429,0.8542,-0.1649,-0.4932,
    -0.988857,1.395711,0,0.9851,-0.1721,-0.0063,
    0.26098,3.25363,-0.45203,-0.5224,-0.3627,0.7717,
    0.390189,2.364823,-0.675827,-0.5109,-0.2402,0.8254,
    0.494429,1.395711,-0.856375,-0.4405,-0.1619,0.883,
    -0.390189,2.364823,-0.675827,0.4097,-0.2394,0.8802,
    0,2.364823,-0.780378,-0.0646,-0.235,0.9698,
    0,3.25363,-0.52196,0.0085,-0.3442,0.9388,
    -0.494429,1.395712,-0.856375,0.5575,-0.1617,0.8143,
    0,1.395711,-0.988857,0.066,-0.1477,0.9868,
    0.45203,3.253629,0.26098,-0.7645,-0.3716,-0.5267,
    0.675827,2.364821,0.390189,-0.8254,-0.2402,-0.5109,
    0.856375,1.395711,0.494429,-0.883,-0.1619,-0.4405,
    -0.390189,2.364823,0.675827,0.515,-0.2485,-0.8204,
    -0.494429,1.395712,0.856375,0.498,-0.1721,-0.85,
    -0.675828,2.364823,0.390189,0.8427,-0.2305,-0.4866,
    0,3.25363,-0.52196,0.0085,-0.3442,0.9389,
    -0.675828,2.364823,-0.390189,0.8301,-0.2348,0.5057,
    -0.26098,3.25363,-0.45203,0.5405,-0.3621,0.7594,
    -0.856376,1.395711,-0.494428,0.8621,-0.1452,0.4855,
    0.52196,3.253629,0,-0.9323,-0.3524,-0.0814,
    0,2.364823,0.780378,0.0519,-0.2438,-0.9684,
    -0.26098,3.25363,0.452031,0.4071,-0.3627,-0.8382,
    -0.494429,1.395712,0.856375,0.4979,-0.1721,-0.85,
    -0.452031,3.25363,-0.26098,0.8478,-0.3621,0.3874,
    -0.988857,1.395711,0,0.9851,-0.1721,-0.0062,
    -0.202584,3.740319,0,0.8025,-0.5873,0.1057,
    -0.52196,3.25363,0,0.9168,-0.399,-0.0158,
    0,3.25363,0.52196,0,-0.4093,-0.9124,
    -0.26098,3.25363,0.452031,0.4072,-0.3627,-0.8382,
    -0.101292,3.740319,0.175443,0.3097,-0.5873,-0.7478,
    0.202584,3.740322,0,-0.8166,-0.5772,0,
    -0.175443,3.740319,-0.101292,0.6421,-0.5873,0.4928,
    0,3.740319,-0.202584,-0.1057,-0.5873,0.8025,
    0.26098,3.25363,-0.45203,-0.5223,-0.3628,0.7717,
    -0.26098,3.25363,0.452031,0.4072,-0.3628,-0.8382,
    -0.175443,3.740319,0.101292,0.7072,-0.5772,-0.4083,
    0.101292,3.740319,0.175443,-0.4083,-0.5772,-0.7072,
    -0.101292,3.740319,-0.175443,0.3097,-0.5873,0.7478,
    0.101292,3.740319,-0.175443,-0.4928,-0.5873,0.6421,
    0.26098,3.25363,-0.45203,-0.5223,-0.3627,0.7717,
    0.26098,3.25363,0.452031,-0.3957,-0.3523,-0.8481,
    0,1.304325,-0.957626,0.0562,-0.2096,0.9762,
    -0.829329,1.304325,0.478813,0.8431,-0.0585,-0.5345,
    -0.175443,3.740319,0.101292,0.7072,-0.5773,-0.4083,
    0,3.902081,0,0,-1,0,
    0.175443,3.740322,0.101292,-0.6746,-0.627,-0.3895,
    0,3.740319,0.202584,0,-0.627,-0.779,
    0.175443,3.740319,-0.101292,-0.6746,-0.627,0.3895,
    0.101292,3.740319,0.175443,-0.4083,-0.5773,-0.7072,
    0.780378,2.364821,0,-0.9703,-0.2401,-0.0297,
    0,2.364823,-0.780378,-0.0645,-0.235,0.9698,
    -0.26098,3.25363,0.452031,0.4071,-0.3628,-0.8382,
    0.26098,3.25363,-0.45203,-0.5224,-0.3628,0.7717,
    0.45203,3.253629,0.26098,-0.7645,-0.3716,-0.5268,
    0,2.364823,0.780378,0.0519,-0.2437,-0.9684,
    -0.494429,1.395712,0.856375,0.498,-0.1721,-0.8499,
    -0.856376,1.395712,0.494429,0.8542,-0.1648,-0.4932,
    0.856375,1.395711,0.494429,-0.8831,-0.1618,-0.4405,
    0,1.395711,-0.988857,0.066,-0.1478,0.9868,
    0.494429,1.395711,-0.856375,-0.4405,-0.1618,0.8831,
    0.856375,1.395711,-0.494428,-0.823,-0.1618,0.5445,
    -0.856376,1.395711,-0.494428,0.8621,-0.1452,0.4854,
    -0.856376,1.395712,0.494429,0.8542,-0.1648,-0.4931,
    0,1.395711,0.988857,-0.066,-0.1478,-0.9868,
    -0.478813,1.304325,0.829328,0.4155,-0.1225,-0.9013,
    0.988857,1.395711,0,-0.985,-0.1618,0.0601,
    0.856375,1.395711,0.494429,-0.883,-0.1618,-0.4405,
    0.988857,1.395711,0,-0.985,-0.1618,0.06,
    -0.494429,1.395712,-0.856375,0.5574,-0.1617,0.8143,
    0.494429,1.395711,-0.856375,-0.4405,-0.1618,0.883,
    1.555928,-5.46419,-0.305541,0.7592,0.5253,-0.3842,
    0.641252,-3.990608,-0.370226,0.5104,0.4153,0.753,
    0.740453,-3.990608,0,-0.1809,0.327,-0.9276,
    -1.04778,-3.352169,0,0.9729,0.0302,0.2293,
    -0.640846,-3.990608,-0.369993,0.8028,0.375,0.4635,
    0.740453,-3.990608,0,-0.1809,0.327,-0.9275,
    1.68112,-5.46419,-0.330125,-0.8987,-0.1788,-0.4005,
    1.68112,-5.46419,-0.330125,0,0,1,
    1.68112,-5.46419,-0.330125,0,0,1,
    1.620956,-5.46419,-0.554661,0,0,1,
    -0.330126,-5.46419,-1.68112,-0.4004,-0.1787,0.8987,
    0,-3.352169,-1.04778,-0.2293,0.0302,0.9729,
    0.640846,-3.990608,0.369993,-0.8028,0.375,-0.4635,
    0.914995,-3.346909,0.528273,-0.8773,0.2006,-0.4359,
    -1.68112,-5.46419,0.330126,0.8965,-0.1918,0.3995,
    0.330125,-5.46419,1.68112,0.4004,-0.1787,-0.8987,
    0,-3.352169,1.04778,0.2293,0.0302,-0.9729,
    -0.513357,-5.46419,-1.500244,-0.0462,0.5448,-0.8373,
    0,-3.990608,-0.740453,-0.9099,0.4146,-0.0141,
    -0.305542,-5.46419,-1.555928,-0.5993,0.5218,-0.6071,
    1.620956,-5.46419,-0.554661,-0.0522,-0.0097,0.9986,
    0.641252,-3.990608,-0.370226,0.5104,0.4153,0.7531,
    1.500244,-5.46419,-0.513356,0.7965,0.5677,0.2079,
    -0.369993,-3.990608,0.640846,0.4635,0.375,-0.8028,
    -0.330126,-5.46419,-1.68112,0,0,1,
    -0.330126,-5.46419,-1.68112,0,0,1,
    -0.554663,-5.46419,-1.620955,0,0,1,
    0.513357,-5.46419,1.500244,0.0462,0.5448,0.8373,
    0,-3.990608,0.740453,0.9074,0.4152,0.0655,
    0.305541,-5.46419,1.555928,0.5993,0.5218,0.6071,
    -1.620956,-5.46419,0.554663,0.0522,0.011,-0.9986,
    -0.641251,-3.990608,0.370227,-0.5104,0.4153,-0.7531,
    -1.500244,-5.46419,0.513357,-0.8254,0.5218,-0.2154,
    1.68112,-5.46419,-0.330125,-0.8987,-0.1787,-0.4004,
    1.04778,-3.352169,0,-0.9729,0.0302,-0.2293,
    0.369993,-3.990608,-0.640846,-0.4635,0.375,0.8028,
    -0.740453,-3.990608,0,0.1809,0.327,0.9275,
    -1.68112,-5.46419,0.330126,0.8965,-0.1917,0.3995,
    -1.555928,-5.46419,0.305542,-0.7482,0.5448,0.3786,
    -0.641251,-3.990608,0.370227,-0.5104,0.4153,-0.753,
    -0.740453,-3.990608,0,0.1809,0.327,0.9276,
    -0.554663,-5.46419,-1.620955,0.9986,-0.0097,0.0522,
    -0.370227,-3.990608,-0.641251,0.8712,0.3332,-0.3606,
    -0.330126,-5.46419,-1.68112,-0.4004,-0.1788,0.8987,
    0,-3.990608,-0.740453,-0.9099,0.4145,-0.0141,
    -1.68112,-5.46419,0.330126,0,0,1,
    -1.68112,-5.46419,0.330126,0,0,1,
    -1.620956,-5.46419,0.554663,0,0,1,
    0.330125,-5.46419,1.68112,0,0,1,
    0.330125,-5.46419,1.68112,0,0,1,
    0.554662,-5.46419,1.620956,0,0,1,
    0,-3.990608,0.740453,0.9073,0.4153,0.0655,
    0.330125,-5.46419,1.68112,0.4005,-0.1788,-0.8987,
    0.370227,-3.990608,0.641251,-0.8938,0.327,0.3071,
    0.554662,-5.46419,1.620956,-0.9986,-0.0097,-0.0522,
    0.370227,-3.990608,0.641251,-0.8937,0.327,0.3071,
    -0.370227,-3.990608,-0.641251,0.8712,0.3332,-0.3605,
    0.67231,-4.217939,0.388159,-0.7198,0.5561,-0.4156,
    0.67231,-4.217939,0.388159,-0.7197,0.5561,-0.4156,
    0.388404,-4.217939,0.672735,-0.3401,0.7336,-0.5883,
    0.370227,-3.990608,0.641251,-0.8938,0.327,0.307,
    0,-4.217939,0.776808,-0.0782,0.412,-0.9078,
    0,-3.990608,0.740453,0.9073,0.4152,0.0655,
    -0.641251,-3.990608,0.370227,-0.5103,0.4153,-0.7531,
    -0.388158,-4.217939,0.67231,0.4156,0.5561,-0.7197,
    -0.672735,-4.217939,0.388404,0.7501,0.5605,-0.351,
    -0.740453,-3.990608,0,0.181,0.327,0.9275,
    -0.776808,-4.217939,0,0.8014,0.5982,0.0004,
    0.641252,-3.990608,-0.370226,0.5103,0.4153,0.7531,
    0.388159,-4.217939,-0.67231,-0.4156,0.5561,0.7197,
    0.672736,-4.217939,-0.388403,-0.7501,0.5605,0.351,
    0.481847,-3.813728,0.278195,0.722,0.5523,0.4168,
    0.570766,-4.217939,0,0.7756,0.6235,0.0983,
    0.57688,-3.803308,0,0.7415,0.6699,-0.0381,
    0.57688,-3.803308,0,0.7415,0.6698,-0.0381,
    0.494298,-4.217939,-0.285383,0.7861,0.3885,-0.4808,
    0.499592,-3.803308,-0.288439,0.496,0.8053,-0.3249,
    0.494298,-4.217939,-0.285383,0.7861,0.3884,-0.4808,
    0.278195,-3.813728,-0.481847,0.4168,0.5523,-0.722,
    0,-4.217939,-0.570766,0.0218,0.5103,-0.8597,
    0,-3.803308,-0.576879,0.0333,0.8053,-0.592,
    -0.28844,-3.803308,-0.499592,-0.3378,0.6698,-0.6612,
    -0.285383,-4.217939,-0.494298,-0.526,0.4939,-0.6924,
    -0.481847,-3.813728,-0.278194,-0.722,0.5523,-0.4168,
    -0.28844,-3.803308,-0.499592,-0.3377,0.6699,-0.6612,
    -0.672735,-4.217939,0.388404,0.75,0.5606,-0.351,
    -0.570766,-4.217939,0,-0.8597,0.5103,-0.0218,
    0.388159,-4.217939,-0.67231,-0.4155,0.5561,0.7198,
    0.672736,-4.217939,-0.388403,-0.7501,0.5606,0.351,
    0.388159,-4.217939,-0.67231,-0.4156,0.5561,0.7198,
    0.277822,-4.217939,-0.481201,0.4392,0.4779,-0.7607,
    0.672736,-4.217939,-0.388403,-0.75,0.5606,0.351,
    0.776808,-4.217939,0,-0.8014,0.5982,-0.0004,
    0,-4.217939,0.570766,-0.0218,0.5103,0.8597,
    -0.388158,-4.217939,0.67231,0.4155,0.5561,-0.7198,
    -0.494298,-4.217939,0.285383,-0.6924,0.4939,0.526,
    -0.672735,-4.217939,0.388404,0.7501,0.5606,-0.351,
    -0.388158,-4.217939,0.67231,0.4156,0.5561,-0.7198,
    -0.277822,-4.217939,0.481202,-0.4392,0.4779,0.7607,
    0.481201,-4.217939,0.277822,0.7607,0.4779,0.4392,
    0.67231,-4.217939,0.388159,-0.7198,0.5561,-0.4155,
    0.285383,-4.217939,0.494298,0.526,0.4939,0.6924,
    -0.67231,-4.217939,-0.388158,0.7198,0.5561,0.4155,
    -0.388404,-4.217939,-0.672735,0.351,0.5606,0.7501,
    -0.67231,-4.217939,-0.388158,0.7198,0.5561,0.4156,
    -0.481201,-4.217939,-0.277822,-0.7607,0.4779,-0.4392,
    -0.388404,-4.217939,-0.672735,0.351,0.5606,0.75,
    0,-4.217939,-0.776808,-0.0004,0.5982,0.8014,
    0,-3.990608,-0.740453,-0.91,0.4144,-0.0141,
    -0.388404,-4.217939,-0.672735,0.351,0.5605,0.7501,
    -0.576879,-3.803308,0,-0.592,0.8053,-0.0333,
    0.740453,-3.990608,0,-0.181,0.327,-0.9275,
    -0.499592,-3.803308,0.28844,-0.6612,0.6698,0.3378,
    -0.278194,-3.813728,0.481847,-0.4168,0.5523,0.722,
    -0.499592,-3.803308,0.28844,-0.6612,0.6699,0.3377,
    0,-3.803308,0.57688,-0.0333,0.8053,0.592,
    0.28844,-3.803308,0.499593,0.3378,0.6698,0.6612,
    -0.67231,-4.217939,-0.388158,0.7197,0.5561,0.4156,
    0.28844,-3.803308,0.499593,0.3377,0.6699,0.6612,
    1.68112,-5.46419,-0.330125,-0.8987,-0.1788,-0.4004,
    0.330125,-5.46419,1.68112,0.4004,-0.1788,-0.8987,
    0.554662,-5.46419,1.620956,-0.9986,-0.0096,-0.0522,
    -0.554663,-5.46419,-1.620955,0.9986,-0.0096,0.0522,
    -1.68112,-5.46419,0.330126,0.8965,-0.1918,0.3994,
    0.641252,-3.990608,-0.370226,0.5104,0.4152,0.7531,
    1.620956,-5.46419,-0.554661,0,0,1,
    -0.330126,-5.46419,-1.68112,-0.4005,-0.1788,0.8987,
    0,-3.990608,-0.740453,-0.9099,0.4145,-0.0142,
    -0.554663,-5.46419,-1.620955,0,0,1,
    -1.68112,-5.46419,0.330126,0.8965,-0.1917,0.3994,
    -1.500244,-5.46419,0.513357,-0.8254,0.5218,-0.2155,
    -0.641251,-3.990608,0.370227,-0.5104,0.4152,-0.753,
    -1.620956,-5.46419,0.554663,0,0,1,
    0.554662,-5.46419,1.620956,0,0,1,
    0,-3.990608,0.740453,0.9073,0.4153,0.0654,
    -0.641251,-3.990608,0.370227,-0.5104,0.4152,-0.7531,
    -0.641251,-3.990608,0.370227,-0.5103,0.4152,-0.7531,
    0.570766,-4.217939,0,0.7756,0.6235,0.0982,
    0.278195,-3.813728,-0.481847,0.4169,0.5523,-0.722,
    -0.481847,-3.813728,-0.278194,-0.722,0.5523,-0.4169,
    -0.672735,-4.217939,0.388404,0.7501,0.5606,-0.3509,
    -0.570766,-4.217939,0,-0.8597,0.5103,-0.0217,
    0,-4.217939,-0.776808,0,0.5982,0.8014,
    0.672736,-4.217939,-0.388403,-0.7501,0.5606,0.3509,
    0.494298,-4.217939,-0.285383,0.7861,0.3884,-0.4807,
    0.388404,-4.217939,0.672735,-0.3398,0.7336,-0.5885,
    0,-4.217939,0.570766,-0.0217,0.5103,0.8597,
    -0.277822,-4.217939,0.481202,-0.4392,0.478,0.7607,
    0.776808,-4.217939,0,-0.8014,0.5982,0,
    -0.776808,-4.217939,0,0.8014,0.5982,0,
    -0.388404,-4.217939,-0.672735,0.3509,0.5606,0.7501,
    0,-4.217939,-0.570766,0.0217,0.5103,-0.8597,
    0.641252,-3.990608,-0.370226,0.5103,0.4152,0.7531,
    -0.278194,-3.813728,0.481847,-0.4169,0.5523,0.722,
    0.481847,-3.813728,0.278195,0.722,0.5523,0.4169,
    1.620956,-5.46419,-0.554661,-0.0522,-0.0096,0.9986,
    -1.555928,-5.46419,0.305542,-0.7482,0.5448,0.3787,
    -0.481847,-3.813728,-0.278194,-0.7219,0.5523,-0.4169,
    0,-3.798343,0,0,1,0,
    -0.576879,-3.803308,0,-0.592,0.8053,-0.0334,
    0.499592,-3.803308,-0.288439,0.496,0.8053,-0.3248,
    0.278195,-3.813728,-0.481847,0.4169,0.5523,-0.7219,
    0,-3.803308,-0.576879,0.0334,0.8053,-0.592,
    -0.278194,-3.813728,0.481847,-0.4169,0.5523,0.7219,
    0,-3.803308,0.57688,-0.0334,0.8053,0.592,
    0.57688,-3.803308,0,0.7415,0.6699,-0.0382,
    0.481847,-3.813728,0.278195,0.7219,0.5523,0.4169
  ];
  
  gl.bufferData(gl.ARRAY_BUFFER,
                new Float32Array(modelData),
                gl.STATIC_DRAW);
				
  { // Positions
    const numComponents = 3;
    const type = gl.FLOAT;
    const normalize = false;
    const stride = 2*3*(4);
    const offset = 0;
	
    gl.vertexAttribPointer(
        programInfo.attribLocations.vertexPosition,
        numComponents,
        type,
        normalize,
        stride,
        offset);
    gl.enableVertexAttribArray(
        programInfo.attribLocations.vertexPosition);
  }
  { // Normals
    const numComponents = 3;
    const type = gl.FLOAT;
    const normalize = false;
    const stride = 2*3*(4);
    const offset = 3*(4);
	
    gl.vertexAttribPointer(
        programInfo.attribLocations.vertexNormal,
        numComponents,
        type,
        normalize,
        stride,
        offset);
    gl.enableVertexAttribArray(
        programInfo.attribLocations.vertexNormal);
  }
  
  const modelIndexData_1 = [
    0,1,2,
    3,4,5,
    6,7,8,
    9,10,11,
    12,13,14,
    15,13,16,
    17,0,18,
    19,5,17,
    20,21,22,
    23,11,24,
    14,25,26,
    7,10,27,
    28,29,30,
    31,30,32,
    33,34,32,
    35,36,37,
    38,39,40,
    41,38,42,
    43,44,45,
    46,43,47,
    48,46,49,
    50,51,52,
    53,54,52,
    55,53,56,
    30,57,58,
    32,30,59,
    60,32,61,
    40,62,63,
    42,64,65,
    66,42,67,
    52,68,69,
    56,70,71,
    72,56,73,
    59,58,36,
    61,59,35,
    74,61,38,
    65,63,75,
    67,65,76,
    77,67,78,
    45,79,31,
    49,47,31,
    80,49,34,
    71,69,81,
    73,82,43,
    83,73,46,
    76,84,50,
    78,85,54,
    86,78,53,
    87,88,18,
    3,5,89,
    25,90,26,
    9,11,23,
    16,14,91,
    1,16,92,
    17,18,93,
    19,17,93,
    20,4,3,
    23,24,20,
    14,26,91,
    7,9,94,
    79,30,95,
    31,32,34,
    33,32,60,
    39,37,40,
    38,64,42,
    41,42,66,
    43,45,47,
    96,47,49,
    97,49,80,
    50,52,54,
    98,70,56,
    99,56,72,
    30,58,59,
    32,59,61,
    100,61,74,
    40,63,65,
    101,65,67,
    102,67,77,
    52,69,82,
    56,82,73,
    72,73,83,
    59,36,39,
    61,39,38,
    74,38,41,
    65,75,85,
    67,85,78,
    77,78,86,
    45,95,47,
    49,31,103,
    80,103,33,
    82,81,104,
    73,105,46,
    83,46,48,
    85,50,54,
    78,54,53,
    86,53,55,
    106,58,107,
    108,36,106,
    108,109,37,
    110,63,111,
    110,50,112,
    113,50,114,
    115,68,113,
    116,69,115,
    117,81,118,
    119,120,117,
    121,57,28,
    107,57,122,
    10,122,123,
    21,124,121,
    125,117,4,
    4,118,5,
    5,115,17,
    17,113,0,
    87,114,1,
    1,110,13,
    13,111,14,
    14,108,25,
    25,106,7,
    7,107,10,
    106,36,58,
    126,37,36,
    108,111,109,
    127,75,63,
    110,114,50,
    113,51,50,
    115,69,68,
    118,81,69,
    117,120,44,
    121,128,120,
    119,122,129,
    107,58,57,
    10,130,122,
    21,11,122,
    125,131,117,
    4,132,116,
    5,133,115,
    17,134,113,
    87,135,114,
    1,136,110,
    13,137,111,
    14,138,108,
    25,139,106,
    7,140,107
  ];
  const modelIndexData_2 = [
    141,142,143,
    144,145,146,
    147,148,149,
    150,151,152,
    153,154,155,
    154,156,157,
    158,159,142,
    159,160,145,
    161,162,163,
    161,164,165,
    166,167,148,
    167,168,151,
    169,154,153,
    170,156,171,
    172,162,159,
    162,165,160,
    173,161,174,
    173,175,164,
    176,143,167,
    143,146,168,
    177,169,178,
    149,152,179,
    155,173,180,
    181,175,173,
    182,183,180,
    184,185,186,
    187,176,166,
    188,180,174,
    189,172,190,
    191,153,192,
    166,147,193,
    194,174,163,
    195,196,141,
    192,153,183,
    193,197,184,
    141,176,187,
    179,18,92,
    168,3,89,
    26,198,165,
    160,9,23,
    16,91,175,
    199,16,157,
    152,93,18,
    89,93,152,
    146,20,3,
    145,23,20,
    91,26,164,
    165,94,9,
    186,200,201,
    189,195,201,
    188,194,201,
    187,202,201,
    203,186,201,
    182,188,201,
    204,187,201,
    205,203,201,
    200,182,201,
    195,204,201,
    194,189,201,
    202,205,201,
    141,143,176,
    144,146,206,
    147,149,184,
    150,152,149,
    153,155,183,
    154,157,155,
    158,142,141,
    159,145,144,
    161,172,174,
    161,165,207,
    166,148,147,
    167,151,150,
    169,153,208,
    170,171,169,
    172,159,209,
    162,160,159,
    173,174,180,
    173,164,161,
    176,167,210,
    143,168,167,
    211,178,184,
    149,179,169,
    155,180,183,
    181,173,155,
    182,180,188,
    184,186,203,
    187,166,202,
    188,174,194,
    189,190,195,
    191,192,186,
    166,193,202,
    194,172,189,
    195,141,204,
    192,183,182,
    193,184,203,
    141,187,204,
    212,88,213,
    214,89,151,
    26,215,164,
    216,23,217,
    16,218,181,
    199,157,219,
    220,221,179,
    19,220,151,
    222,3,223,
    217,20,224,
    91,225,175,
    215,9,226,
    227,228,229,
    230,231,77,
    232,233,227,
    234,235,236,
    102,237,238,
    33,239,240,
    99,241,230,
    97,242,243,
    244,245,246,
    247,248,249,
    243,250,72,
    251,252,253,
    254,255,256,
    257,258,259,
    100,260,261,
    60,262,248,
    238,262,74,
    263,264,265,
    265,266,267,
    268,269,244,
    270,271,41,
    272,273,274,
    275,276,277,
    55,250,258,
    278,279,256,
    48,239,280,
    281,282,254,
    66,231,283,
    232,284,239,
    282,285,286,
    287,288,289,
    290,291,292,
    293,292,294,
    295,296,297,
    298,299,300,
    301,302,303,
    304,305,303,
    305,306,307,
    306,308,307,
    309,310,311,
    312,313,294,
    314,304,315,
    316,306,317,
    318,299,319,
    286,320,288,
    321,322,323,
    324,320,325,
    284,299,326,
    327,328,286,
    329,309,330,
    331,313,332,
    333,306,334,
    335,336,334,
    310,313,337,
    263,331,231,
    338,297,319,
    313,339,337,
    245,316,262,
    322,340,341,
    255,324,250,
    340,320,342,
    320,343,342,
    269,344,336,
    328,298,345,
    346,249,227,
    254,347,348,
    244,270,349,
    257,265,350,
    227,249,351,
    86,293,231,
    232,33,346,
    234,236,352,
    102,268,353,
    33,338,239,
    99,257,241,
    97,281,279,
    244,269,354,
    247,100,295,
    83,278,250,
    251,253,355,
    254,280,278,
    257,99,290,
    100,247,233,
    100,74,262,
    41,354,262,
    263,86,356,
    265,357,358,
    268,102,269,
    353,246,354,
    272,274,359,
    275,277,360,
    99,72,250,
    361,83,347,
    97,80,239,
    281,97,282,
    102,77,231,
    232,319,327,
    282,239,284,
    287,286,288,
    362,250,324,
    293,363,292,
    351,262,316,
    298,326,299,
    301,364,302,
    302,317,365,
    305,317,306,
    306,309,308,
    309,332,366,
    367,322,368,
    316,317,304,
    296,369,306,
    370,371,299,
    372,328,373,
    324,374,322,
    291,288,320,
    285,375,299,
    284,326,328,
    331,332,309,
    344,376,313,
    377,309,378,
    245,269,336,
    310,332,313,
    263,294,329,
    338,379,297,
    313,322,339,
    271,334,314,
    322,325,380,
    361,288,321,
    340,325,320,
    320,328,343,
    269,231,331,
    328,326,381,
    346,382,249,
    254,256,347,
    244,246,270,
    257,357,383
  ];
  const modelIndexData_3 = [
    311,384,385,
    310,386,385,
    307,308,385,
    337,339,385,
    387,388,385,
    305,389,385,
    301,303,385,
    342,343,385,
    341,390,385,
    340,391,385,
    298,392,385,
    345,393,385
  ];
  
  const modelIndexBuffer_1 = gl.createBuffer();
  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, modelIndexBuffer_1);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,
                new Uint16Array(modelIndexData_1),
                gl.STATIC_DRAW);
				
  const modelIndexBuffer_2 = gl.createBuffer();
  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, modelIndexBuffer_2);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,
                new Uint16Array(modelIndexData_2),
                gl.STATIC_DRAW);
				
  const modelIndexBuffer_3 = gl.createBuffer();
  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, modelIndexBuffer_3);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,
                new Uint16Array(modelIndexData_3),
                gl.STATIC_DRAW);	

  return {
    array: modelVertexBuffer,
	index_1: modelIndexBuffer_1,
	index_2: modelIndexBuffer_2,
	index_3: modelIndexBuffer_3
  };
}
function render() {
   gl.clearColor( 0.0, 0.0, 0.0, 1.0);
   gl.clear(gl.COLOR_BUFFER_BIT| gl.DEPTH_BUFFER_BIT);

  const fieldOfView = 45 * Math.PI / 180;   // in radians
  const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;
  const zNear = 0.1;
  const zFar = 100.0;
  const projectionMatrix = mat4.create();

  mat4.perspective(projectionMatrix,
                   fieldOfView,
                   aspect,
                   zNear,
                   zFar);

  var modelMatrix = mat4.create();


/*
  mat4.rotate(modelMatrix, 
			  modelMatrix, 
			  -0.7, 
			  [1.0, 0.0, 1.0]);*/
  mat4.rotate(modelMatrix, 
			  modelMatrix, 
			  timer / 30.0, 
			  [0, 1, 0]);
  
  //if(model_angle > 1.0) {
	  //model_angle -= 1.0;
	  //Rotate Current quat by 0.01 about model_axis
	  var quat_iter = quat.create();
	  var quat_iter_conj = quat.create();
	  quat.conjugate(quat_iter_conj, quat_iter);
	  
	  quat.setAxisAngle(quat_iter, model_axis, model_angle);
	  quat.mul(model_quat, quat_iter, model_quat);
	  quat.mul(model_quat, model_quat, quat_iter_conj);
	  model_angle = 0;
  //}
  //else
	  //model_angle = 0.0;
  
  var quat_mat = mat4.create();
  mat4.fromQuat(quat_mat, model_quat);
  mat4.mul(modelMatrix, quat_mat, modelMatrix); // MAY NEED TO SWAP SIDES
  
  var viewMatrix = mat4.create();
  
  mat4.translate(viewMatrix,   
                 viewMatrix,   
                 [0.01*Math.sin( timer/0.2 ), 0.01*Math.cos( timer/0.23 ), 0]);
  

  /*
  mat4.translate(viewMatrix,   
                 viewMatrix,   
                 [1.0, 1.5, 0]);
  */
  
  mat4.translate(viewMatrix,   
                 viewMatrix,   
                 [0, 0, -15.0]);
  /*
  mat4.rotate(viewMatrix, 
			  viewMatrix, 
			  timer / 60.0, 
			  [0, 1, 0]);
  */
  var MV = mat4.create();
  var MVP = mat4.create();
  mat4.mul(MV, viewMatrix, modelMatrix);
  mat4.mul(MVP, projectionMatrix, MV);
  //mat4.mul(MVP, projectionMatrix, viewMatrix);
  //mat4.mul(MVP, MVP, modelMatrix);
  
  var VI = mat3.create();
  var MVI = mat3.create();
  mat3.normalFromMat4(VI, viewMatrix);
  mat3.normalFromMat4(MVI, MV);
  
  gl.useProgram(programInfo.program);
  gl.bindBuffer(gl.ARRAY_BUFFER, modelBuffer.array);

  var tbands = 2.0;
  var tstride = 0.05;
  var lightamb = 0.05;
  
  var ldir = vec3.fromValues(l_dir[0], l_dir[1], l_dir[2]);
  vec3.normalize(ldir, ldir);
  vec3.transformMat3(ldir, ldir, VI);
  
  gl.uniform1f(
	  programInfo.uniformLocations.toonNumBands,
	  tbands);
  gl.uniform1f(
	  programInfo.uniformLocations.toonStride,
	  tstride);
  gl.uniform1f(
	  programInfo.uniformLocations.lightAmb,
	  lightamb);
  gl.uniform3fv(
	  programInfo.uniformLocations.lightDir,
	  ldir);
	  
  gl.uniformMatrix4fv(
      programInfo.uniformLocations.MVP,
      false,
      MVP);
  gl.uniformMatrix3fv(
      programInfo.uniformLocations.MVI,
      false,
      MVI);
	  
  {
    const offset = 0;
    var vertexCount;
	
	vertexCount = 3 * (144);
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, modelBuffer.index_1);
	gl.uniform3f(
	  programInfo.uniformLocations.objectColor,
	  1.0, 1.0, 1.0);
    gl.drawElements(gl.TRIANGLES, vertexCount, gl.UNSIGNED_SHORT, offset);
	
	vertexCount = 3 * (244);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, modelBuffer.index_2);
	gl.uniform3f(
	  programInfo.uniformLocations.objectColor,
	  1.0, 0.0, 0.0);
    gl.drawElements(gl.TRIANGLES, vertexCount, gl.UNSIGNED_SHORT, offset);
	
    vertexCount = 3 * (12);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, modelBuffer.index_3);
	gl.uniform3f(
	  programInfo.uniformLocations.objectColor,
	  0.2, 0.2, 0.2);
    gl.drawElements(gl.TRIANGLES, vertexCount, gl.UNSIGNED_SHORT, offset);
  }
}
function initShaderProgram(vsSource, fsSource) {
  const vertexShader = loadShader(gl.VERTEX_SHADER, vsSource);
  const fragmentShader = loadShader(gl.FRAGMENT_SHADER, fsSource);

  const shaderProgram = gl.createProgram();
  gl.attachShader(shaderProgram, vertexShader);
  gl.attachShader(shaderProgram, fragmentShader);
  gl.linkProgram(shaderProgram);

  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
    alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));
    return null;
  }

  return shaderProgram;
}
function loadShader(type, source) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));
    gl.deleteShader(shader);
    return null;
  }
  return shader;
}

function getSphereCords(ex, ey, h, w, x0, y0) {
  var x = (2.0*(ex - x0) - w) / w;
  var y = (h - 2.0*(ey - y0)) / h;
  
  var d = Math.sqrt(x*x + y*y);
  var z = Math.cos((Math.PI/2.0) * ((d < 1.0) ? d : 1.0));
  var a = 1.0 / Math.sqrt(x*x + y*y + z*z);
  x *= a; y *= a; z *= a;
  
  return [x, y, z];
}

function canvasMouseMove(e) {
  var pc = canvas.getBoundingClientRect();
  var cords = getSphereCords(e.clientX, e.clientY, canvas.clientHeight, canvas.clientWidth, pc.left, pc.top);
  
  var dx = cords[0] - last_pos[0];
  var dy = cords[1] - last_pos[1];
  var dz = cords[2] - last_pos[2];
  
  model_angle = 1.0 * Math.sqrt(dx*dx + dy*dy + dz*dz);
  
  model_axis = [ 
    last_pos[1]*cords[2] - last_pos[2]*cords[1],
    last_pos[2]*cords[0] - last_pos[0]*cords[2], 
    last_pos[0]*cords[1] - last_pos[1]*cords[0]
  ];
  var n = Math.sqrt(model_axis[0]*model_axis[0] + 
					model_axis[1]*model_axis[1] + 
					model_axis[2]*model_axis[2]);
  if(n != 0) {
    model_axis[0] /= n; model_axis[1] /= n; model_axis[2] /= n;
  }
  last_pos = cords;
  
  //var cords_str = "Coordinates: (" + dx + "," + dy + ',' + dz + ")";
  //document.getElementById("demo").innerHTML = cords_str;
}
document.getElementById("glcanvas").addEventListener("mousedown", function(e){
	var pc = canvas.getBoundingClientRect();
    last_pos = getSphereCords(e.clientX, e.clientY, canvas.clientHeight, canvas.clientWidth, pc.left, pc.top);
    canvasMouseMove(e); 
    this.addEventListener("mousemove", canvasMouseMove);
});

document.getElementById("glcanvas").addEventListener("mouseup", function(e){
    this.removeEventListener("mousemove", canvasMouseMove);
});
main();
